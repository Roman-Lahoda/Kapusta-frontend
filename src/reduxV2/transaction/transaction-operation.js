import axios from 'axios';
import { createAsyncThunk } from '@reduxjs/toolkit';

import '@pnotify/core/dist/BrightTheme.css';
import { alert as alertPnotify, defaultModules, notice, info, success, error } from '@pnotify/core';
import '@pnotify/core/dist/PNotify.css';
import * as PNotifyMobile from '@pnotify/mobile';
import '@pnotify/mobile/dist/PNotifyMobile.css';

defaultModules.set(PNotifyMobile, {});
import { toast } from 'react-toastify';

export const addTransaction = createAsyncThunk(
  'transaction/add',
  async (transaction, { rejectWithValue }) => {
    try {
      const { data } = await axios.post('/transactions', transaction);
      //TODO
      // success({
      //   text: '–ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞',
      // });
      // toast.promise(data, {
      //   pending: 'Promise is pending',
      //   success: 'Promise resolved üëå',
      //   error: 'Promise rejected ü§Ø',
      // });
      if (data) {
        const user = JSON.parse(localStorage.getItem('user'));
        toast.success('–ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞', {
          autoClose: 2000,
        });
        switch (transaction.transactionType) {
          case 'income':
            const incrementBalance = user.balance + data.data.sum;
            localStorage.setItem('user', JSON.stringify({ ...user, balance: incrementBalance }));
            break;
          case 'expense':
            const decrementBalance = user.balance - data.data.sum;
            localStorage.setItem('user', JSON.stringify({ ...user, balance: decrementBalance }));
            break;
          default:
            break;
        }
      }
      return transaction;
    } catch (error) {
      if (error.toString().includes('401')) {
        alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –≤–æ–π–¥–∏—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ.');
        localStorage.removeItem('user');
        location.reload();
        // toast.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –≤–æ–π–¥–∏—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ');
      } else {
        // console.log('test');
        toast.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–∑–∂–µ');
      }

      return rejectWithValue(error);
    }
  },
);

export const deleteTransaction = createAsyncThunk(
  'transaction/delete',
  async (transaction, { rejectWithValue }) => {
    try {
      const { data } = await axios.delete(`/transactions/${transaction?.idT}`);
      // success({
      //   text: '–ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞',
      // });
      if (data) {
        toast.success('–ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞');
        const user = JSON.parse(localStorage.getItem('user'));
        // console.log('delete transaction');
        switch (transaction.transactionType) {
          case 'income':
            const incrementBalance = user.balance - transaction.sum;
            localStorage.setItem('user', JSON.stringify({ ...user, balance: incrementBalance }));
            break;
          case 'expense':
            // console.log('test delete');
            const decrementBalance = user.balance + transaction.sum;
            localStorage.setItem('user', JSON.stringify({ ...user, balance: decrementBalance }));
            break;
          default:
            break;
        }
      }
      return transaction;
    } catch (error) {
      //TODO
      if (error.toString().includes('401')) {
        alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –≤–æ–π–¥–∏—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ.');
        localStorage.removeItem('user');
        location.reload();
      } else {
        toast.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–∑–∂–µ');
      }
      // console.log(error);
      return rejectWithValue(error);
    }
  },
);

export const fetchTransactionSummary = createAsyncThunk(
  'transaction/fetchSummary',
  async ({ rejectWithValue }) => {
    try {
      const { data } = await axios.get('/transactions/summary');
      return data;
    } catch (error) {
      //TODO
      if (error.toString().includes('401')) {
        alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –≤–æ–π–¥–∏—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ.');
        localStorage.removeItem('user');
        location.reload();
      } else {
        toast.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–∑–∂–µ');
      }
      return rejectWithValue('test');
    }
  },
);

export const fetchTransactionReport = createAsyncThunk(
  'transaction/fetchReport',
  async (date, { rejectWithValue }) => {
    try {
      const { data } = await axios.get(`/transactions/month?month=${date.month}&year=${date.year}`);
      return data;
    } catch (error) {
      //TODO
      if (error.toString().includes('401')) {
        alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –≤–æ–π–¥–∏—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ.');
        localStorage.removeItem('user');
        location.reload();
      } else {
        toast.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–∑–∂–µ');
      }
      return rejectWithValue(error.response.data);
    }
  },
);

const transactionOperation = {
  addTransaction,
  deleteTransaction,
  fetchTransactionSummary,
  fetchTransactionReport,
};
export default transactionOperation;
