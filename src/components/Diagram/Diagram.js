// –ë—ã–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –±–∏–±–ª–∏–æ—Ç–µ–∫–∏: victory  –∏  lodash (–Ω—É–∂–Ω–∞ –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Å—Ç–∏–ª—è)

import { VictoryBar, VictoryChart, VictoryAxis, VictoryLabel } from 'victory';
import ownVictoryTheme from './ownVictoryTheme.js';
import s from './Diagram.module.scss';
import EllipsisText from 'react-ellipsis-text';
import { useState, useEffect } from 'react';

const Diagram = function ({ arrayOfData, type }) {
  const [isOnline, setIsOnline] = useState(null);
  // –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–Ω–∏–º–∞–µ—Ç –∏–∑ –º–∞—Å—Å–∏–≤–∞ –¥–∞–Ω–Ω—ã—Ö —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è —Å–≤–æ–π—Å—Ç–≤ sum, description, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç
  // —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –ø–æ–ª–µ–π —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º (description). –ï—Å–ª–∏ –≤ –±–∞–∑–µ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å –æ–¥–Ω–∞–∫–æ–≤—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º (description)–±
  // —Ç–æ –Ω–µ —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—ã—Ö —Å—Ç–æ–ª–±–∏–∫–æ–≤ –≤ –¥–∏–∞–≥—Ä–∞–º–º–µ, –∞ –¥–æ–±–∞–≤–ª—è–µ—Ç —Å—É–º–º—É –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π
  // –û–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏:
  const changeInfo = array => {
    let result = [];
    for (let i = 0; i < array?.length; i += 1) {
      if (!result.includes(array[i]?.description)) {
        result.push(array[i]?.description);
      }
    }
    result = result.map(el => {
      return { description: el, sum: 0 };
    });
    for (let i = 0; i < array?.length; i += 1) {
      const choseEl = result.find(el => el.description === array[i]?.description);
      choseEl.sum += array[i]?.sum;
    }
    return result;
  };

  // –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏:

  // const dataForDiagram =  changeInfo( exampleTransactionArray.data)
  const dataForDiagram = changeInfo(arrayOfData);
  // console.log('üöÄ ~ file: Diagram.js ~ line 34 ~ Diagram ~ dataForDiagram', dataForDiagram);

  // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Å—É–º–º –æ—Ç –±–æ–ª—å—à–µ–π –∫ –º–µ–Ω—å—à–µ–π
  // dataForDiagram.sort((a, b) => b.sum - a.sum);
  const isTablet = window.screen.width > 768;
  // console.log('üöÄ ~ file: Diagram.js ~ line 39 ~ Diagram ~ window.innerWidth', window.innerWidth);
  if (isTablet) {
    dataForDiagram.sort((a, b) => b.sum - a.sum);
  } else {
    dataForDiagram.sort((a, b) => a.sum - b.sum);
  }
  let x;
  const x1 = () => {
    // console.log('test');
    x = 10;
  };
  const x2 = () => {
    x = 20;
  };
  window.addEventListener('resize', function () {
    if (window.matchMedia('(min-width: 768px)').matches) {
      // console.log('Screen width is at least 500px');
      // dataForDiagram.sort((a, b) => b.sum - a.sum);
      // x = 10;
      // x1();
      // console.log(x);
      setIsOnline(false);
    } else {
      // console.log('Screen less than 500px');
      // dataForDiagram.sort((a, b) => a.sum - b.sum);
      // x = 20;
      // x2();
      setIsOnline(true);
    }
    // console.log(x);
  });
  // console.log('üöÄ ~ file: Diagram.js ~ line 53 ~ dataForDiagram', dataForDiagram);
  useEffect(() => {
    // console.log(isOnline);
  }, [isOnline]);
  // console.log(x);
  return (
    <div className={s.diagramConfig}>
      {/* <span style={{ fontSize: '20px' }}>TEST</span>
      <EllipsisText text={'qqqqq wwwww eeeee rrrrr ttttt yyyyy'} length={25} />; */}
      {dataForDiagram.length < 1 ? (
        <p className={s.textAlertForAbsentTransactions}>
          –í—ã –µ—â—ë –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏ –æ {type}
        </p>
      ) : (
        <VictoryChart
          // –¥–æ–±–∞–≤–ª—è–µ–º —Å–≤–æ—é –∫–∞—Å—Ç–æ–º–Ω—É—é —Ç–µ–º—É –¥–∏–∞–≥—Ä–∞–º–º—ã
          theme={ownVictoryTheme}
          domainPadding={10}
        >
          {/* <VictoryAxis // —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ –æ—Å–∏ –•
            // dependAxis={true}
            // style={{ data: { fill: '#dff515' } }}
            tickFormat={dataForDiagram?.map(elem => {
              return elem?.description;
              // return `<span>qqq</span>`;
              // return <EllipsisText text={elem?.description} length={25} />;
            })} //–≠—Ç–æ –ø–æ–¥–ø–∏—Å–∏ –≤–Ω–∏–∑—É –¥–∏–æ–≥—Ä–∞–º–º—ã –∫ –∫–∞–∂–¥–æ–º—É —Å—Ç–æ–ª–±—Ü—É
          /> */}
          <VictoryAxis
            // label="Label"
            style={{
              axis: {
                stroke: '#756f6a',
              },
              // ticks: {
              //   fill: 'transparent',
              //   size: ({ index }) => (index % 2 === 0 ? 10 : 0),
              // },
              axisLabel: { fontSize: 10, padding: 30 },
              // grid: { stroke: ({ tick }) => (tick > 0.5 ? 'red' : 'grey') },
              // ticks: { stroke: 'grey', size: 5 },
              tickLabels: { fontSize: 10, padding: 5 },
            }}
            tickFormat={dataForDiagram?.map(elem => {
              return elem?.description;
              // return `qqq`;
              // return `<EllipsisText text={elem?.description} length={25} />`;
              // return `${(<span>www</span>)}`;
            })}
          />

          <VictoryBar
            data={dataForDiagram}
            barRatio={0.5}
            cornerRadius={{ top: 5 }}
            x="description"
            y="sum"
            labels={dataForDiagram.map(elem => `${elem?.sum} –≥—Ä–Ω`)}
            // style={{ data: { fill: '#FF751D' } }}
            style={{ data: { fill: ({ index }) => (index % 3 === 0 ? '#FF751D' : '#FFDAC0') } }}
            // events={[
            //   {
            //     target: 'data',
            //     eventHandlers: {
            //       onClick: () => {
            //         return [
            //           {
            //             target: 'data',
            //             mutation: props => {
            //               const fill = props.style && props.style.fill;
            //               return fill === '#F5F6FB'
            //                 ? null
            //                 : { style: { fill: '#F5F6FB', stroke: '#FF751D', strokeWidth: 1 } };
            //             },
            //           },
            //         ];
            //       },
            //     },
            //   },
            // ]}
            animate={{
              duration: 2000,
              onLoad: { duration: 1000 },
            }}
            //–¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ - –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            horizontal={window.innerWidth < 768}
            // labelComponent={<VictoryLabel dy={-25} dx={0}/>}
          />
        </VictoryChart>
      )}
    </div>
  );
};

export default Diagram;
